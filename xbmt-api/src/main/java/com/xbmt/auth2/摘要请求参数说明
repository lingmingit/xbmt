
http协议之digest(摘要)认证  http://blog.csdn.net/jszj/article/details/8918967


认证的过程总体上是：客户端请求资源->服务器返回认证标示->客户端发送认证信息->服务器查验认证，如果成功则继续资源传送，否则直接断开连接。
	服务器返回认证标示的必要内容如下：
		WWW-Authenticate: Digest realm="xx",qop="auth,auth-int",nonce="xx",opaque="xx"
		WWW-Authenticate:Digest realm="Contacts Realm via Digest Authentication",qop="auth",nonce="MTQ2ODU2MjkxNzgwODo4YzQ2NWNmMWUyNDgxZTM3OTYxZDljZmI4MDkxNTE5ZQ=="

HTTP 摘要认证参数说明如下
  realm 【固定字符串   摘要信息】
                     的值是一个简单的字符串，而rfc2617上写的是一个email类型的字符串，我看这个没有必要意义，所以我就也简单地写了个email形式的字符串 
  qop  【认证方式， 目前 auth 】
   		是认证的(校验)方式，这个比较重要，对后面md5的加密过程有影响，值就按照上面的那样写就行了                   
  nonce 【类似token，目前 nonce=   Base64.encode（失效毫秒数：MD5(失效毫秒数：计算签名固定key)） 】
                   的值也是一个字符串，如果不严格，可以随机生成一个就行，注意它是个GUID，即唯一的、不重复的。如果严格，则需要包含时间信息、客户端IP信息和其它信息，因为认证过程的时间很短，所以如果服务器收到认证信息后发现这个时间和服务器的时间相去甚远，那说明不正常，直接拒绝，以防止攻击，还有客户端IP，如果这个IP一直这样攻击，则可以在一定时间内发现是该IP的连接则直接断掉。这些严格的做法主要是为了防止攻击。在rfc2617上有狭路为详细的描述。我这里没有考虑这些，只是使用了个简单的字符串
  opaque 【固定字符串，目前没有使用】
  		是个字符串，它只是透传而已，即客户端还会原样返回过来。实际上，上面的那些域，客户端都还是会原样返回的，但返回时除了以上的那些域之外，还会增加新的内容进来。
  		
                   
 	客户端在收到401错误之后，根据上面的那些信息，需要用户输入用户名和密码，然后返回给服务器如下内容：
	Authorization: Digest username="xx",realm="xx",qop="auth",nonce="xx",uri="path",cnonce="xx",nc=00000001,response="xx",opaque="xx" 
	Authorization:Digest username="user",realm="Contacts Realm via Digest Authentication",nonce="MTQ2ODU2MjkxNzgwODo4YzQ2NWNmMWUyNDgxZTM3OTYxZDljZmI4MDkxNTE5ZQ==",uri="/api/auth2/get_login_user",qop=auth,nc=,cnonce="",response="39e509088b21f2b693c9ace310543419",opaque=""

   username【登录用户名 ，数据用户名】是要认证的用户名
   realm 同上    
   nonce 同上，第一次请求服务器端响应来的值，再次请求时，通过请求头传回服务端验证
   qop   同上， 第一次服务器单返回什么，再传回去即可
   uri   【客户端截取URL 获取URL 即可】 是本次请求的资源位置，比如“/public/userinfo.htm”
   cnonce 【固定字符串，目前没有使用】 是客户端产生的一个GUID，一般是32字节，而且是16个字节字符串的16进制形式表示，所以其中的内容是0~9和a~f之间的那些字符。其实nonce也是一样，但我没有特意这样做，比如我直接生成一个数字，然后以16进制输出，而没有特殊追求16个字节。
   opaque 同上 
   nc  【重新发送认证次数 计数器 字符串  ,8位  如： 00000001 、00000002、00000003 】
   		是认证的次数，因为如果认证失败，则仍然可以重新发送认证信息继续认证，第一次是1，第二次是2，第三次是3，...。但我这里没有这样弄，只允许一次，如果认证不过就关闭了连接，所以我只处理了1的情况，即00000001，这个值总是固定的8个字节，而且不加引号，和其它域的格式不一样，导致我在分析这个域的时候单独写了个代码，晕，不知道为什么会定义的不一样。
   method  是指“GET”/"POST"，即http头中指定的获取资源的方式
   password 登录用户密码，数据库用户密码，如果是加密的，则需要加密后才可以使用
   
   response 【】的值就很重要了，是根据以上信息，再加上密码通过一定的顺序计算出的一个md5码，固定为16字节的16进制表示形式。服务器在收到所有这些信息后，也通过相同的方式计算出这个值，而密码则是保存在服务器端，即服务器要通过用户名去找到对应的密码，然后和计算出md5值，再和客户端传过来的response值对比，如果一样，则认证通过，否则通不过。
                   总的计算公式是：md5=HA1:HD:HA2
        HA1[MD5加密]=username:realm:password
        HD[原始字符串]=nonce:nc:cnonce:qop
        HA2[MD5加密]=method:uri
       
    
        
        